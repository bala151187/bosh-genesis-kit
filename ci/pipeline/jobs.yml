jobs:

- name: build-kit
  public: true
  serial: false
  plan:
  - do:
    - in_parallel:
      - { get: version, params: {pre: rc} }
      - { get: git, trigger: true }
      - { get: git-ci }
    - task: build-kit
      file: git-ci/ci/tasks/build-kit.yml
      params:
        KIT_SHORTNAME:        (( grab meta.kit ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
    - put: build
      params:
        file: build/*.tar.gz
        acl: public-read
    - put: version
      params: {file: version/number}
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: prerelease build for '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: prerelease build for '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))


- name: spec-tests
  public: true
  serial: false
  plan:
  - do:
    - in_parallel:
      - { get: build,   passed: [build-kit], trigger: true}
      - { get: version, passed: [build-kit]}
      - { get: git,     passed: [build-kit]}
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: spec-tests
      file: git-ci/ci/tasks/spec-tests.yml
      attempts: 2
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: spec-check
  public: true
  serial: false
  plan:
  - do:
    - in_parallel:
      - { get: build,   passed: [build-kit], trigger: true}
      - { get: version, passed: [build-kit]}
      - { get: git,     passed: [build-kit]}
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: spec-check
      file: git-ci/ci/tasks/spec-check.yml
    - put: spec-check
      params:
        file: spec-check/diff-*
        acl: public-read
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: ship-prerelease
  public: true
  serial: false
  plan:
  - do:
    - in_parallel:
      - { get: build,   passed: [build-kit]}
      - { get: version, passed: [build-kit]}
      - { get: git,     passed: [build-kit]}
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: ship-prerelease
      file: git-ci/ci/tasks/ship-prerelease/task.yml
      params:
        REPO_ROOT:    git
        VERSION_FROM: version/number
        RELEASE_ROOT: gh
        NOTIFICATION_OUT: notifications
        GITHUB_OWNER:  (( grab meta.github.owner ))
        GIT_EMAIL:     (( grab meta.git.email ))
        GIT_NAME:      (( grab meta.git.name ))
        KIT_SHORTNAME: (( grab meta.kit ))
    - put: git
      params:
        merge: true
        repository: git
    - put: github-prerelease
      params:
        name:   gh/name
        tag:    gh/tag
        body:   release-notes/notes.md
        globs: [gh/artifacts/*]
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))


- name: deploy-proto
  public: true
  serial_groups: [testing-proto]
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [spec-check, spec-tests]}
      - { get: build,      passed: [spec-check, spec-tests], trigger: true }
      - { get: spec-check, passed: [spec-check]}
      - { get: git,        passed: [spec-check, spec-tests]}
      - { get: git-ci }
    - task: test-deploy-proto
      file: git-ci/ci/tasks/deploy.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-proto
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           false
        SKIP_REPLACE_SECRETS: false
        SKIP_SMOKE_TESTS:     false
        SKIP_CLEAN:           false

        # CONNECTIVITY ENVS
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: deploy-non-proto
  public: true
  serial_groups: [testing-non-proto]
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [spec-check, spec-tests]}
      - { get: build,      passed: [spec-check, spec-tests], trigger: true }
      - { get: spec-check, passed: [spec-check]}
      - { get: git,        passed: [spec-check, spec-tests]}
      - { get: git-ci }
    - task: test-deploy-non-proto
      file: git-ci/ci/tasks/deploy.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-baseline
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           false
        SKIP_REPLACE_SECRETS: false
        SKIP_SMOKE_TESTS:     false
        SKIP_CLEAN:           false

        # CONNECTIVITY ENVS
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: upgrade-proto
  public: true
  serial: true
  serial_groups: [test-proto2]
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [spec-check, spec-tests]}
      - { get: build,      passed: [spec-check, spec-tests], trigger: true }
      - { get: spec-check, passed: [spec-check]}
      - { get: git,        passed: [spec-check, spec-tests]}
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: deploy-stable
      file: git-ci/ci/tasks/deploy-stable.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-proto-upgrade
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           false
        SKIP_REPLACE_SECRETS: false
        SKIP_SMOKE_TESTS:     true
        SKIP_CLEAN:           true

        # CONNECTIVITY ENVS
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    - task: upgrade
      file: git-ci/ci/tasks/upgrade.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-proto-upgrade
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           true
        SKIP_REPLACE_SECRETS: true
        SKIP_SMOKE_TESTS:     false
        SKIP_CLEAN:           false

        # CONNECTIVITY ENVS
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: upgrade-non-proto
  public: true
  serial: true
  serial_groups: [test-non-proto2]
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [spec-check, spec-tests]}
      - { get: build,      passed: [spec-check, spec-tests], trigger: true }
      - { get: spec-check, passed: [spec-check]}
      - { get: git,        passed: [spec-check, spec-tests]}
      - { get: git-ci }
      - { get: git-latest-tag }
    - task: deploy-stable
      file: git-ci/ci/tasks/deploy-stable.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-upgrade
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           false
        SKIP_REPLACE_SECRETS: false
        SKIP_SMOKE_TESTS:     true
        SKIP_CLEAN:           true

        # CONNECTIVITY ENVS
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    - task: upgrade
      file: git-ci/ci/tasks/upgrade.yml
      params:
        # TEST ENVS
        DEPLOY_ENV:           ci-upgrade
        KIT_SHORTNAME:        (( grab meta.kit ))
        SKIP_FRESH:           true
        SKIP_REPLACE_SECRETS: true
        SKIP_SMOKE_TESTS:     false
        SKIP_CLEAN:           false

        # CONNECTIVITY ENVS
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: tests job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

- name: bats-tests
  public: true
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [spec-check, spec-tests]}
      - { get: build,      passed: [spec-check, spec-tests], trigger: true }
      - { get: spec-check, passed: [spec-check]}
      - { get: git,        passed: [spec-check, spec-tests]}
      - { get: git-ci }
      - { get: bats }
    - in_parallel:
      - { get: vsphere-stemcell, params: { tarball: true } }
      - task: deploy_for_bats
        file: git-ci/ci/tasks/deploy.yml
        params:
          DEPLOY_ENV:           ci-bats
          GENESIS_HONOR_ENV:    1
          GIT_NAME:             (( grab meta.git.name ))
          GIT_EMAIL:            (( grab meta.git.email ))
          VAULT_URI:            (( grab meta.vault.url ))
          VAULT_TOKEN:          (( grab meta.vault.token ))
          KIT_SHORTNAME:        (( grab meta.kit ))
          BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
          BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
          SKIP_FRESH:           false
          SKIP_CLEAN:           true
          SKIP_SMOKE_TESTS:     true
    - in_parallel:
        fail_fast: true
        limit: 1
        steps:
        - task: bats-apps
          file: git-ci/ci/tasks/bats.yml
          attempts: 2
          params:
            VAULT_URI:            (( grab meta.vault.url ))
            VAULT_TOKEN:          (( grab meta.vault.token ))
    - task: cleanup-environment
      file: git-ci/ci/tasks/deploy.yml
      params:
        DEPLOY_ENV:           ci-bats
        GENESIS_HONOR_ENV:    1
        GIT_NAME:             (( grab meta.git.name ))
        GIT_EMAIL:            (( grab meta.git.email ))
        VAULT_URI:            (( grab meta.vault.url ))
        VAULT_TOKEN:          (( grab meta.vault.token ))
        KIT_SHORTNAME:        (( grab meta.kit ))
        BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
        BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
        BOSH_CLIENT:          (( grab meta.bosh.username ))
        BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
        SKIP_FRESH:           true
        SKIP_DEPLOY:          true
        SKIP_SMOKE_TESTS:     true
        SKIP_CLEAN:           false

- name: prepare
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - { get: version,    passed: [deploy-proto,deploy-non-proto,upgrade-proto,upgrade-non-proto], params: {bump: final} }
      - { get: spec-check, passed: [deploy-proto,deploy-non-proto,upgrade-proto,upgrade-non-proto] }
      - { get: git,        passed: [deploy-proto,deploy-non-proto,upgrade-proto,upgrade-non-proto], trigger: true }
      - { get: git-ci }
      - { get: git-latest-tag }
      - { get: release-notes }
    - task: generate-release-notes
      file: git-ci/ci/tasks/generate-release-notes.yml
      params:
        RELEASE_NOTES_WEB_URL:  (( grab meta.github.release_notes.edit ))
        RELEASE_NOTES_FILE:     (( grab meta.github.release_notes.file ))
        GIT_NAME:               (( grab meta.git.name ))
        GIT_EMAIL:              (( grab meta.git.email ))
        VAULT_URI:              (( grab meta.vault.url ))
        VAULT_TOKEN:            (( grab meta.vault.token ))
        KIT_SHORTNAME:          (( grab meta.kit ))
    - put: release-notes
      params:
        rebase: true
        repository: release-notes
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release candidate job 'pre' failed (which is unusual).
        ok:      no
        link:    (( grab meta.shout.links.build ))


- name: ship-release
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - { get: version, resource: version, passed: [prepare], params: {bump: final} }
      - { get: git,                        passed: [prepare] }
      - { get: spec-check, trigger: false, passed: [prepare] }
      - { get: release-notes}
      - { get: git-ci }
      - { get: git-main }
      - { get: git-latest-tag }
    - task: build-kit
      file: git-ci/ci/tasks/build-kit.yml
      params:
        KIT_SHORTNAME:    (( grab meta.kit ))
        VAULT_URI:        (( grab meta.vault.url ))
        VAULT_TOKEN:      (( grab meta.vault.token ))
    - task: release
      file: git-ci/ci/tasks/ship-release.yml
      params:
        KIT_SHORTNAME:    (( grab meta.kit ))
        DEVELOP_BRANCH:   (( grab meta.github.branch ))
        RELEASE_BRANCH:   (( grab meta.github.main-branch ))
        RELEASE_ROOT:     gh
        RELEASE_NOTES:    (( grab meta.github.release_notes.file ))
        NOTIFICATION_OUT: notifications
        GITHUB_OWNER:     (( grab meta.github.owner ))
        GIT_EMAIL:        (( grab meta.git.email ))
        GIT_NAME:         (( grab meta.git.name ))
    - put: git-main
      params:
        merge: false
        tag: gh/tag
        repository: git-main
    - put: github
      params:
        name:   gh/name
        tag:    gh/tag
        body:   (( concat "release-notes/"  meta.github.release_notes.file ))
        globs: [gh/artifacts/*]
    - put: version
      params:
        bump: patch
    - put: notify
      params:
        method: announce
        file: notifications/message
        link: (( concat meta.github.uri "/releases" ))
    on_success:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release job '$BUILD_JOB_NAME' succeeded.
        ok:      yes
        link:    (( grab meta.shout.links.build ))
    on_failure:
      put: notify
      params:
        topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
        message: release job '$BUILD_JOB_NAME' failed.
        ok:      no
        link:    (( grab meta.shout.links.build ))

# ------------------------------------------------------------------------------
# VERSION CONTROL
# ------------------------------------------------------------------------------

- name: patch
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: patch} }
    - { put: version,                 params: {file: version/number} }

- name: minor
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: minor} }
    - { put: version,                 params: {file: version/number} }

- name: major
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: major} }
    - { put: version,                 params: {file: version/number} }

